{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\last\\\\ProviderServiceApp\\\\client\\\\src\\\\Components\\\\GetProviderService.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { GET_SERVICE_BY_PROVIDER_ID, SEARCH_SERVICE } from '../GraphQL/Queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction GetProviderService(provider_id, search_text) {\n  _s();\n\n  console.log(search_text);\n  let apiname = SEARCH_SERVICE;\n  let params;\n\n  if (search_text === '') {\n    apiname = GET_SERVICE_BY_PROVIDER_ID;\n    params = {\n      variables: {\n        provider_id\n      }\n    };\n  } else {\n    apiname = SEARCH_SERVICE;\n    params = {\n      variables: {\n        provider_id: provider_id,\n        search_text: search_text\n      }\n    };\n  }\n\n  var {\n    data\n  } = useQuery(apiname, params);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [data && data !== undefined && data.getServiceByProviderId !== undefined && data.getServiceByProviderId.map(service => {\n      let url = \"/detail/\" + service.serviceid;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cont-part\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: url,\n          children: service.service\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 14\n        }, this)\n      }, service.serviceid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 19\n      }, this);\n    }), data && data !== undefined && data.searchService !== undefined && data.searchService.map(service => {\n      let url = \"/detail/\" + service.serviceid;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cont-part\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: url,\n          children: service.service\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }, this)\n      }, service.serviceid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 19\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(GetProviderService, \"wDefygpsWBVTl/fEL2emlq2/574=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetProviderService;\nexport default GetProviderService;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetProviderService\");","map":{"version":3,"names":["useQuery","React","Link","GET_SERVICE_BY_PROVIDER_ID","SEARCH_SERVICE","GetProviderService","provider_id","search_text","console","log","apiname","params","variables","data","undefined","getServiceByProviderId","map","service","url","serviceid","searchService"],"sources":["C:/Users/HP/Desktop/last/ProviderServiceApp/client/src/Components/GetProviderService.tsx"],"sourcesContent":["import { useQuery } from '@apollo/client'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { GET_SERVICE_BY_PROVIDER_ID, SEARCH_SERVICE } from '../GraphQL/Queries'\r\n\r\nfunction GetProviderService(provider_id : number, search_text: string) {\r\n    console.log(search_text);\r\n    let apiname = SEARCH_SERVICE;\r\n    let params;\r\n    if(search_text === ''){\r\n      apiname = GET_SERVICE_BY_PROVIDER_ID;\r\n      params = {variables : {provider_id}};\r\n    }\r\n    else{\r\n      apiname = SEARCH_SERVICE;\r\n      params = {variables:{provider_id: provider_id, search_text: search_text}};\r\n    }\r\n    var {data} = useQuery(apiname,params);\r\n\r\n  return (\r\n        <>\r\n        {data && data !== undefined && data.getServiceByProviderId !== undefined && data.getServiceByProviderId.map((service :any) => {\r\n          let url = \"/detail/\"+service.serviceid;\r\n           return(<div className=\"cont-part\" key={service.serviceid}>\r\n             <Link to={url}>{service.service}</Link>\r\n             </div>)\r\n        })}\r\n        {data && data !== undefined && data.searchService !== undefined && data.searchService.map((service :any) => {\r\n          let url = \"/detail/\"+service.serviceid;\r\n           return(<div className=\"cont-part\" key={service.serviceid}>\r\n             <Link to={url}>{service.service}</Link>\r\n             </div>)\r\n        })}\r\n        </>\r\n    \r\n  )\r\n}\r\n\r\nexport default GetProviderService"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,0BAAT,EAAqCC,cAArC,QAA2D,oBAA3D;;;;AAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAkDC,WAAlD,EAAuE;EAAA;;EACnEC,OAAO,CAACC,GAAR,CAAYF,WAAZ;EACA,IAAIG,OAAO,GAAGN,cAAd;EACA,IAAIO,MAAJ;;EACA,IAAGJ,WAAW,KAAK,EAAnB,EAAsB;IACpBG,OAAO,GAAGP,0BAAV;IACAQ,MAAM,GAAG;MAACC,SAAS,EAAG;QAACN;MAAD;IAAb,CAAT;EACD,CAHD,MAII;IACFI,OAAO,GAAGN,cAAV;IACAO,MAAM,GAAG;MAACC,SAAS,EAAC;QAACN,WAAW,EAAEA,WAAd;QAA2BC,WAAW,EAAEA;MAAxC;IAAX,CAAT;EACD;;EACD,IAAI;IAACM;EAAD,IAASb,QAAQ,CAACU,OAAD,EAASC,MAAT,CAArB;EAEF,oBACM;IAAA,WACCE,IAAI,IAAIA,IAAI,KAAKC,SAAjB,IAA8BD,IAAI,CAACE,sBAAL,KAAgCD,SAA9D,IAA2ED,IAAI,CAACE,sBAAL,CAA4BC,GAA5B,CAAiCC,OAAD,IAAkB;MAC5H,IAAIC,GAAG,GAAG,aAAWD,OAAO,CAACE,SAA7B;MACC,oBAAO;QAAK,SAAS,EAAC,WAAf;QAAA,uBACL,QAAC,IAAD;UAAM,EAAE,EAAED,GAAV;UAAA,UAAgBD,OAAO,CAACA;QAAxB;UAAA;UAAA;UAAA;QAAA;MADK,GAAgCA,OAAO,CAACE,SAAxC;QAAA;QAAA;QAAA;MAAA,QAAP;IAGF,CAL2E,CAD5E,EAOCN,IAAI,IAAIA,IAAI,KAAKC,SAAjB,IAA8BD,IAAI,CAACO,aAAL,KAAuBN,SAArD,IAAkED,IAAI,CAACO,aAAL,CAAmBJ,GAAnB,CAAwBC,OAAD,IAAkB;MAC1G,IAAIC,GAAG,GAAG,aAAWD,OAAO,CAACE,SAA7B;MACC,oBAAO;QAAK,SAAS,EAAC,WAAf;QAAA,uBACL,QAAC,IAAD;UAAM,EAAE,EAAED,GAAV;UAAA,UAAgBD,OAAO,CAACA;QAAxB;UAAA;UAAA;UAAA;QAAA;MADK,GAAgCA,OAAO,CAACE,SAAxC;QAAA;QAAA;QAAA;MAAA,QAAP;IAGF,CALkE,CAPnE;EAAA,gBADN;AAiBD;;GA/BQd,kB;UAYQL,Q;;;KAZRK,kB;AAiCT,eAAeA,kBAAf"},"metadata":{},"sourceType":"module"}